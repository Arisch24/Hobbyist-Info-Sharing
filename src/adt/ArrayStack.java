package adt;/** * ArrayStack.java A class that implements the ADT array by using an expandable * array. * * @author Frank M. Carrano * @version 2.0 */public class ArrayStack<T> implements StackInterface<T> {  private T[] array;  private int topIndex; // index of top entry  private static final int DEFAULT_CAPACITY = 50;  public ArrayStack() {    this(DEFAULT_CAPACITY);  }  public ArrayStack(int initialCapacity) {    array = (T[]) new Object[initialCapacity];    topIndex = -1;  }  public void push(T newEntry) {      if(isArrayFull())          doubleArray();    if (topIndex < array.length) {        topIndex++;        array[topIndex] = newEntry;    }  }  public T peek() {    T top = null;    if (!isEmpty()) {      top = array[topIndex];    }    return top;  }   public T pop() {    T top = null;    if (!isEmpty()) {      top = array[topIndex];      array[topIndex] = null;      topIndex--;    } // end if    return top;  }    public T get() {      return array[topIndex];  }    public T elementAt(int givenPosition) {      T result = null;            if((givenPosition >= 0) && (givenPosition <= capacity())) {          result = array[givenPosition];      }            return result;  }    public int indexOf(T anEntry) {      int where = -1;      boolean found = false;            for(int index = 0; !found && index < (topIndex + 1); index++){          if(anEntry.equals(array[index])){              where = index;              found = true;          }      }      return where;  }    public T firstElement() {      return array[topIndex];  }    public T lastElement() {      return array[0];  }  public boolean isEmpty() {    return topIndex < 0;  }  public void clear() {    topIndex = -1;  }    public boolean isFull() {      return false;  }    public int capacity() {      return topIndex + 1;  }    public int search(T anEntry){      int where = - 1;            for(int index = (topIndex + 1); index >= 0; index--){          if(anEntry.equals(array[index])){              where = (topIndex + 1) - index;          }      }      return where;  }    @Override  public String toString() {      String outputStr = "[";            for(int i = 0; i < (topIndex + 1); i++) {          outputStr += array[i] + ", ";      }      outputStr += "]";            return outputStr;  }    // private methods  private boolean isArrayFull() {      return topIndex == array.length - 1;  }      private void doubleArray(){      int oldSize = array.length;      // create a new array which has double the size;      T[] newList = (T[]) new Object[oldSize * 2];      // copy the elements from the old array to the new array      for(int i = 0; i < oldSize; i++){          newList[i] = array[i];      }      // assign the array to point to the new array object      array = newList;  }  } 
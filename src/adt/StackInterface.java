package adt;/** * An interface for the ADT stack. * * @author Frank M. Carrano * @version 2.0 */public interface StackInterface<T> {  /**   * Task: Adds a new entry to the top of the stack.   *   * @param newEntry an object to be added to the stack   */  public void push(T newEntry);  /**   * Task: Removes and returns the stack's top entry.   *   * @return either the object at the top of the stack or, if the stack is empty   * before the operation, null   */  public T pop();  /**   * Task: Retrieves the stack's top entry.   *   * @return either the object at the top of the stack or null if the stack is   * empty   */  public T peek();  /**   * Task: Detects whether the stack is empty.   *   * @return true if the stack is empty   */  public boolean isEmpty();  /**   * Task: Removes all entries from the stack   */  public void clear();      /**   * Task: Gets the top entry from the stack   *    * @return top element from the stack   */  public T get();    /**   * Task: Gets an element from the stack based on the givenPosition   *    * @param givenPosition   *    * @return element at the specified position   */  public T elementAt(int givenPosition);    /**   * Task: Gets the index of an element from the stack. First element is index 1   * .   * @param anEntry   *    * @return the index of the passed element. -1 is returned if the element is    * not present in the stack   */  public int indexOf(T anEntry);    /**   * Task: Gets the first element from the stack   *    * @return first element from the stack   */  public T firstElement();    /**   * Task: Gets the last element from the stack   *    * @return last element from the stack   */  public T lastElement();    /**   * Task: Check if the stack is full.   *    * @return true is the stack is full and false otherwise.   */  public boolean isFull();    /**   * Task: Gets the size of the stack that are filled.   *    * @return a number indicating the size of the stack   */  public int capacity();    /**   * Task: Searches for the position of an element in the stack from the top.   *    * @param anEntry   *    * @return the 1-based position of the element from the top of the stack.   */  public int search(T anEntry);} // end StackInterface